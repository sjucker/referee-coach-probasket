/*
 * This file is generated by jOOQ.
 */
package ch.refereecoach.probasket.jooq.tables.daos;


import ch.refereecoach.probasket.jooq.AbstractSpringDAOImpl;
import ch.refereecoach.probasket.jooq.tables.Tags;
import ch.refereecoach.probasket.jooq.tables.records.TagsRecord;

import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Repository
public class TagsDao extends AbstractSpringDAOImpl<TagsRecord, ch.refereecoach.probasket.jooq.tables.pojos.Tags, Long> {

    /**
     * Create a new TagsDao without any configuration
     */
    public TagsDao() {
        super(Tags.TAGS, ch.refereecoach.probasket.jooq.tables.pojos.Tags.class);
    }

    /**
     * Create a new TagsDao with an attached configuration
     */
    @Autowired
    public TagsDao(Configuration configuration) {
        super(Tags.TAGS, ch.refereecoach.probasket.jooq.tables.pojos.Tags.class, configuration);
    }

    @Override
    public Long getId(ch.refereecoach.probasket.jooq.tables.pojos.Tags object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ch.refereecoach.probasket.jooq.tables.pojos.Tags> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Tags.TAGS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<ch.refereecoach.probasket.jooq.tables.pojos.Tags> fetchById(Long... values) {
        return fetch(Tags.TAGS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public ch.refereecoach.probasket.jooq.tables.pojos.Tags fetchOneById(Long value) {
        return fetchOne(Tags.TAGS.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<ch.refereecoach.probasket.jooq.tables.pojos.Tags> fetchOptionalById(Long value) {
        return fetchOptional(Tags.TAGS.ID, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ch.refereecoach.probasket.jooq.tables.pojos.Tags> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Tags.TAGS.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<ch.refereecoach.probasket.jooq.tables.pojos.Tags> fetchByName(String... values) {
        return fetch(Tags.TAGS.NAME, values);
    }
}
