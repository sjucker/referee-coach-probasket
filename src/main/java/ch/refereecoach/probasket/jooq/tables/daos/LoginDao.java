/*
 * This file is generated by jOOQ.
 */
package ch.refereecoach.probasket.jooq.tables.daos;

import ch.refereecoach.probasket.jooq.AbstractSpringDAOImpl;
import ch.refereecoach.probasket.jooq.tables.Login;
import ch.refereecoach.probasket.jooq.tables.records.LoginRecord;
import org.jooq.Configuration;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
@Repository
public class LoginDao extends AbstractSpringDAOImpl<LoginRecord, ch.refereecoach.probasket.jooq.tables.pojos.Login, Long> {

    /**
     * Create a new LoginDao without any configuration
     */
    public LoginDao() {
        super(Login.LOGIN, ch.refereecoach.probasket.jooq.tables.pojos.Login.class);
    }

    /**
     * Create a new LoginDao with an attached configuration
     */
    @Autowired
    public LoginDao(Configuration configuration) {
        super(Login.LOGIN, ch.refereecoach.probasket.jooq.tables.pojos.Login.class, configuration);
    }

    @Override
    public Long getId(ch.refereecoach.probasket.jooq.tables.pojos.Login object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ch.refereecoach.probasket.jooq.tables.pojos.Login> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Login.LOGIN.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<ch.refereecoach.probasket.jooq.tables.pojos.Login> fetchById(Long... values) {
        return fetch(Login.LOGIN.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public ch.refereecoach.probasket.jooq.tables.pojos.Login fetchOneById(Long value) {
        return fetchOne(Login.LOGIN.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<ch.refereecoach.probasket.jooq.tables.pojos.Login> fetchOptionalById(Long value) {
        return fetchOptional(Login.LOGIN.ID, value);
    }

    /**
     * Fetch records that have <code>firstname BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ch.refereecoach.probasket.jooq.tables.pojos.Login> fetchRangeOfFirstname(String lowerInclusive, String upperInclusive) {
        return fetchRange(Login.LOGIN.FIRSTNAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>firstname IN (values)</code>
     */
    public List<ch.refereecoach.probasket.jooq.tables.pojos.Login> fetchByFirstname(String... values) {
        return fetch(Login.LOGIN.FIRSTNAME, values);
    }

    /**
     * Fetch records that have <code>lastname BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ch.refereecoach.probasket.jooq.tables.pojos.Login> fetchRangeOfLastname(String lowerInclusive, String upperInclusive) {
        return fetchRange(Login.LOGIN.LASTNAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>lastname IN (values)</code>
     */
    public List<ch.refereecoach.probasket.jooq.tables.pojos.Login> fetchByLastname(String... values) {
        return fetch(Login.LOGIN.LASTNAME, values);
    }

    /**
     * Fetch records that have <code>email BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ch.refereecoach.probasket.jooq.tables.pojos.Login> fetchRangeOfEmail(String lowerInclusive, String upperInclusive) {
        return fetchRange(Login.LOGIN.EMAIL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>email IN (values)</code>
     */
    public List<ch.refereecoach.probasket.jooq.tables.pojos.Login> fetchByEmail(String... values) {
        return fetch(Login.LOGIN.EMAIL, values);
    }

    /**
     * Fetch records that have <code>last_login BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ch.refereecoach.probasket.jooq.tables.pojos.Login> fetchRangeOfLastLogin(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Login.LOGIN.LAST_LOGIN, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_login IN (values)</code>
     */
    public List<ch.refereecoach.probasket.jooq.tables.pojos.Login> fetchByLastLogin(LocalDateTime... values) {
        return fetch(Login.LOGIN.LAST_LOGIN, values);
    }

    /**
     * Fetch records that have <code>referee_coach BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ch.refereecoach.probasket.jooq.tables.pojos.Login> fetchRangeOfRefereeCoach(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(Login.LOGIN.REFEREE_COACH, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>referee_coach IN (values)</code>
     */
    public List<ch.refereecoach.probasket.jooq.tables.pojos.Login> fetchByRefereeCoach(Boolean... values) {
        return fetch(Login.LOGIN.REFEREE_COACH, values);
    }

    /**
     * Fetch records that have <code>referee BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ch.refereecoach.probasket.jooq.tables.pojos.Login> fetchRangeOfReferee(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(Login.LOGIN.REFEREE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>referee IN (values)</code>
     */
    public List<ch.refereecoach.probasket.jooq.tables.pojos.Login> fetchByReferee(Boolean... values) {
        return fetch(Login.LOGIN.REFEREE, values);
    }

    /**
     * Fetch records that have <code>trainer_coach BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ch.refereecoach.probasket.jooq.tables.pojos.Login> fetchRangeOfTrainerCoach(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(Login.LOGIN.TRAINER_COACH, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>trainer_coach IN (values)</code>
     */
    public List<ch.refereecoach.probasket.jooq.tables.pojos.Login> fetchByTrainerCoach(Boolean... values) {
        return fetch(Login.LOGIN.TRAINER_COACH, values);
    }

    /**
     * Fetch records that have <code>trainer BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ch.refereecoach.probasket.jooq.tables.pojos.Login> fetchRangeOfTrainer(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(Login.LOGIN.TRAINER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>trainer IN (values)</code>
     */
    public List<ch.refereecoach.probasket.jooq.tables.pojos.Login> fetchByTrainer(Boolean... values) {
        return fetch(Login.LOGIN.TRAINER, values);
    }

    /**
     * Fetch records that have <code>admin BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ch.refereecoach.probasket.jooq.tables.pojos.Login> fetchRangeOfAdmin(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(Login.LOGIN.ADMIN, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>admin IN (values)</code>
     */
    public List<ch.refereecoach.probasket.jooq.tables.pojos.Login> fetchByAdmin(Boolean... values) {
        return fetch(Login.LOGIN.ADMIN, values);
    }

    /**
     * Fetch records that have <code>rank BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ch.refereecoach.probasket.jooq.tables.pojos.Login> fetchRangeOfRank(String lowerInclusive, String upperInclusive) {
        return fetchRange(Login.LOGIN.RANK, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>rank IN (values)</code>
     */
    public List<ch.refereecoach.probasket.jooq.tables.pojos.Login> fetchByRank(String... values) {
        return fetch(Login.LOGIN.RANK, values);
    }

    /**
     * Fetch records that have <code>active BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ch.refereecoach.probasket.jooq.tables.pojos.Login> fetchRangeOfActive(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(Login.LOGIN.ACTIVE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>active IN (values)</code>
     */
    public List<ch.refereecoach.probasket.jooq.tables.pojos.Login> fetchByActive(Boolean... values) {
        return fetch(Login.LOGIN.ACTIVE, values);
    }
}
