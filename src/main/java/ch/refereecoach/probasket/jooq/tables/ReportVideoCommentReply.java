/*
 * This file is generated by jOOQ.
 */
package ch.refereecoach.probasket.jooq.tables;


import ch.refereecoach.probasket.jooq.Keys;
import ch.refereecoach.probasket.jooq.Public;
import ch.refereecoach.probasket.jooq.tables.Login.LoginPath;
import ch.refereecoach.probasket.jooq.tables.ReportVideoComment.ReportVideoCommentPath;
import ch.refereecoach.probasket.jooq.tables.records.ReportVideoCommentReplyRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ReportVideoCommentReply extends TableImpl<ReportVideoCommentReplyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.report_video_comment_reply</code>
     */
    public static final ReportVideoCommentReply REPORT_VIDEO_COMMENT_REPLY = new ReportVideoCommentReply();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ReportVideoCommentReplyRecord> getRecordType() {
        return ReportVideoCommentReplyRecord.class;
    }

    /**
     * The column <code>public.report_video_comment_reply.id</code>.
     */
    public final TableField<ReportVideoCommentReplyRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column
     * <code>public.report_video_comment_reply.report_video_comment_id</code>.
     */
    public final TableField<ReportVideoCommentReplyRecord, Long> REPORT_VIDEO_COMMENT_ID = createField(DSL.name("report_video_comment_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.report_video_comment_reply.reply</code>.
     */
    public final TableField<ReportVideoCommentReplyRecord, String> REPLY = createField(DSL.name("reply"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.report_video_comment_reply.created_at</code>.
     */
    public final TableField<ReportVideoCommentReplyRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.report_video_comment_reply.created_by</code>.
     */
    public final TableField<ReportVideoCommentReplyRecord, Long> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.BIGINT.nullable(false), this, "");

    private ReportVideoCommentReply(Name alias, Table<ReportVideoCommentReplyRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ReportVideoCommentReply(Name alias, Table<ReportVideoCommentReplyRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.report_video_comment_reply</code> table
     * reference
     */
    public ReportVideoCommentReply(String alias) {
        this(DSL.name(alias), REPORT_VIDEO_COMMENT_REPLY);
    }

    /**
     * Create an aliased <code>public.report_video_comment_reply</code> table
     * reference
     */
    public ReportVideoCommentReply(Name alias) {
        this(alias, REPORT_VIDEO_COMMENT_REPLY);
    }

    /**
     * Create a <code>public.report_video_comment_reply</code> table reference
     */
    public ReportVideoCommentReply() {
        this(DSL.name("report_video_comment_reply"), null);
    }

    public <O extends Record> ReportVideoCommentReply(Table<O> path, ForeignKey<O, ReportVideoCommentReplyRecord> childPath, InverseForeignKey<O, ReportVideoCommentReplyRecord> parentPath) {
        super(path, childPath, parentPath, REPORT_VIDEO_COMMENT_REPLY);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ReportVideoCommentReplyPath extends ReportVideoCommentReply implements Path<ReportVideoCommentReplyRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ReportVideoCommentReplyPath(Table<O> path, ForeignKey<O, ReportVideoCommentReplyRecord> childPath, InverseForeignKey<O, ReportVideoCommentReplyRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ReportVideoCommentReplyPath(Name alias, Table<ReportVideoCommentReplyRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ReportVideoCommentReplyPath as(String alias) {
            return new ReportVideoCommentReplyPath(DSL.name(alias), this);
        }

        @Override
        public ReportVideoCommentReplyPath as(Name alias) {
            return new ReportVideoCommentReplyPath(alias, this);
        }

        @Override
        public ReportVideoCommentReplyPath as(Table<?> alias) {
            return new ReportVideoCommentReplyPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ReportVideoCommentReplyRecord, Long> getIdentity() {
        return (Identity<ReportVideoCommentReplyRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ReportVideoCommentReplyRecord> getPrimaryKey() {
        return Keys.PK__REPORT_VIDEO_COMMENT_REPLY;
    }

    @Override
    public List<ForeignKey<ReportVideoCommentReplyRecord, ?>> getReferences() {
        return Arrays.asList(Keys.REPORT_VIDEO_COMMENT_REPLY__FK__REPORT_VIDEO_COMMENT_REPLY_COMMENT, Keys.REPORT_VIDEO_COMMENT_REPLY__FK__REPORT_VIDEO_COMMENT_REPLY_CREATED_BY);
    }

    private transient ReportVideoCommentPath _reportVideoComment;

    /**
     * Get the implicit join path to the
     * <code>public.report_video_comment</code> table.
     */
    public ReportVideoCommentPath reportVideoComment() {
        if (_reportVideoComment == null)
            _reportVideoComment = new ReportVideoCommentPath(this, Keys.REPORT_VIDEO_COMMENT_REPLY__FK__REPORT_VIDEO_COMMENT_REPLY_COMMENT, null);

        return _reportVideoComment;
    }

    private transient LoginPath _login;

    /**
     * Get the implicit join path to the <code>public.login</code> table.
     */
    public LoginPath login() {
        if (_login == null)
            _login = new LoginPath(this, Keys.REPORT_VIDEO_COMMENT_REPLY__FK__REPORT_VIDEO_COMMENT_REPLY_CREATED_BY, null);

        return _login;
    }

    @Override
    public ReportVideoCommentReply as(String alias) {
        return new ReportVideoCommentReply(DSL.name(alias), this);
    }

    @Override
    public ReportVideoCommentReply as(Name alias) {
        return new ReportVideoCommentReply(alias, this);
    }

    @Override
    public ReportVideoCommentReply as(Table<?> alias) {
        return new ReportVideoCommentReply(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ReportVideoCommentReply rename(String name) {
        return new ReportVideoCommentReply(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ReportVideoCommentReply rename(Name name) {
        return new ReportVideoCommentReply(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ReportVideoCommentReply rename(Table<?> name) {
        return new ReportVideoCommentReply(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ReportVideoCommentReply where(Condition condition) {
        return new ReportVideoCommentReply(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ReportVideoCommentReply where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ReportVideoCommentReply where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ReportVideoCommentReply where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ReportVideoCommentReply where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ReportVideoCommentReply where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ReportVideoCommentReply where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ReportVideoCommentReply where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ReportVideoCommentReply whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ReportVideoCommentReply whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
