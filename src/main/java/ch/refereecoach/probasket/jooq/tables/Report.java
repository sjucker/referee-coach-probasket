/*
 * This file is generated by jOOQ.
 */
package ch.refereecoach.probasket.jooq.tables;


import ch.refereecoach.probasket.jooq.Keys;
import ch.refereecoach.probasket.jooq.Public;
import ch.refereecoach.probasket.jooq.tables.Login.LoginPath;
import ch.refereecoach.probasket.jooq.tables.ReportComment.ReportCommentPath;
import ch.refereecoach.probasket.jooq.tables.ReportVideoComment.ReportVideoCommentPath;
import ch.refereecoach.probasket.jooq.tables.ReportVideoCommentRef.ReportVideoCommentRefPath;
import ch.refereecoach.probasket.jooq.tables.records.ReportRecord;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Report extends TableImpl<ReportRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.report</code>
     */
    public static final Report REPORT = new Report();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ReportRecord> getRecordType() {
        return ReportRecord.class;
    }

    /**
     * The column <code>public.report.id</code>.
     */
    public final TableField<ReportRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.report.external_id</code>.
     */
    public final TableField<ReportRecord, String> EXTERNAL_ID = createField(DSL.name("external_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.report.report_type</code>.
     */
    public final TableField<ReportRecord, String> REPORT_TYPE = createField(DSL.name("report_type"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.report.coach_id</code>.
     */
    public final TableField<ReportRecord, Long> COACH_ID = createField(DSL.name("coach_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.report.coach_name</code>.
     */
    public final TableField<ReportRecord, String> COACH_NAME = createField(DSL.name("coach_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.report.reportee_id</code>.
     */
    public final TableField<ReportRecord, Long> REPORTEE_ID = createField(DSL.name("reportee_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.report.reportee_name</code>.
     */
    public final TableField<ReportRecord, String> REPORTEE_NAME = createField(DSL.name("reportee_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.report.reportee_rank</code>.
     */
    public final TableField<ReportRecord, String> REPORTEE_RANK = createField(DSL.name("reportee_rank"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.report.game_number</code>.
     */
    public final TableField<ReportRecord, String> GAME_NUMBER = createField(DSL.name("game_number"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.report.game_competition</code>.
     */
    public final TableField<ReportRecord, String> GAME_COMPETITION = createField(DSL.name("game_competition"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.report.game_date</code>.
     */
    public final TableField<ReportRecord, LocalDate> GAME_DATE = createField(DSL.name("game_date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>public.report.game_result</code>.
     */
    public final TableField<ReportRecord, String> GAME_RESULT = createField(DSL.name("game_result"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.report.game_home_team</code>.
     */
    public final TableField<ReportRecord, String> GAME_HOME_TEAM = createField(DSL.name("game_home_team"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.report.game_home_team_id</code>.
     */
    public final TableField<ReportRecord, Integer> GAME_HOME_TEAM_ID = createField(DSL.name("game_home_team_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.report.game_guest_team</code>.
     */
    public final TableField<ReportRecord, String> GAME_GUEST_TEAM = createField(DSL.name("game_guest_team"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.report.game_guest_team_id</code>.
     */
    public final TableField<ReportRecord, Integer> GAME_GUEST_TEAM_ID = createField(DSL.name("game_guest_team_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.report.game_referee1_id</code>.
     */
    public final TableField<ReportRecord, Long> GAME_REFEREE1_ID = createField(DSL.name("game_referee1_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.report.game_referee1_name</code>.
     */
    public final TableField<ReportRecord, String> GAME_REFEREE1_NAME = createField(DSL.name("game_referee1_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.report.game_referee2_id</code>.
     */
    public final TableField<ReportRecord, Long> GAME_REFEREE2_ID = createField(DSL.name("game_referee2_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.report.game_referee2_name</code>.
     */
    public final TableField<ReportRecord, String> GAME_REFEREE2_NAME = createField(DSL.name("game_referee2_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.report.game_referee3_id</code>.
     */
    public final TableField<ReportRecord, Long> GAME_REFEREE3_ID = createField(DSL.name("game_referee3_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.report.game_referee3_name</code>.
     */
    public final TableField<ReportRecord, String> GAME_REFEREE3_NAME = createField(DSL.name("game_referee3_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.report.game_video_url</code>.
     */
    public final TableField<ReportRecord, String> GAME_VIDEO_URL = createField(DSL.name("game_video_url"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.report.overall_score</code>.
     */
    public final TableField<ReportRecord, BigDecimal> OVERALL_SCORE = createField(DSL.name("overall_score"), SQLDataType.NUMERIC(2, 1), this, "");

    /**
     * The column <code>public.report.created_at</code>.
     */
    public final TableField<ReportRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.report.created_by</code>.
     */
    public final TableField<ReportRecord, Long> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.report.updated_at</code>.
     */
    public final TableField<ReportRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.report.updated_by</code>.
     */
    public final TableField<ReportRecord, Long> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.report.finished_at</code>.
     */
    public final TableField<ReportRecord, LocalDateTime> FINISHED_AT = createField(DSL.name("finished_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.report.finished_by</code>.
     */
    public final TableField<ReportRecord, Long> FINISHED_BY = createField(DSL.name("finished_by"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.report.reminder_sent</code>.
     */
    public final TableField<ReportRecord, Boolean> REMINDER_SENT = createField(DSL.name("reminder_sent"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.report.game_referee1_rank</code>.
     */
    public final TableField<ReportRecord, String> GAME_REFEREE1_RANK = createField(DSL.name("game_referee1_rank"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.report.game_referee2_rank</code>.
     */
    public final TableField<ReportRecord, String> GAME_REFEREE2_RANK = createField(DSL.name("game_referee2_rank"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.report.game_referee3_rank</code>.
     */
    public final TableField<ReportRecord, String> GAME_REFEREE3_RANK = createField(DSL.name("game_referee3_rank"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.report.internal</code>.
     */
    public final TableField<ReportRecord, Boolean> INTERNAL = createField(DSL.name("internal"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    private Report(Name alias, Table<ReportRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Report(Name alias, Table<ReportRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.report</code> table reference
     */
    public Report(String alias) {
        this(DSL.name(alias), REPORT);
    }

    /**
     * Create an aliased <code>public.report</code> table reference
     */
    public Report(Name alias) {
        this(alias, REPORT);
    }

    /**
     * Create a <code>public.report</code> table reference
     */
    public Report() {
        this(DSL.name("report"), null);
    }

    public <O extends Record> Report(Table<O> path, ForeignKey<O, ReportRecord> childPath, InverseForeignKey<O, ReportRecord> parentPath) {
        super(path, childPath, parentPath, REPORT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ReportPath extends Report implements Path<ReportRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ReportPath(Table<O> path, ForeignKey<O, ReportRecord> childPath, InverseForeignKey<O, ReportRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ReportPath(Name alias, Table<ReportRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ReportPath as(String alias) {
            return new ReportPath(DSL.name(alias), this);
        }

        @Override
        public ReportPath as(Name alias) {
            return new ReportPath(alias, this);
        }

        @Override
        public ReportPath as(Table<?> alias) {
            return new ReportPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ReportRecord, Long> getIdentity() {
        return (Identity<ReportRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ReportRecord> getPrimaryKey() {
        return Keys.PK__REPORT;
    }

    @Override
    public List<UniqueKey<ReportRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UQ__REPORT_EXTERNAL_ID);
    }

    @Override
    public List<ForeignKey<ReportRecord, ?>> getReferences() {
        return Arrays.asList(Keys.REPORT__FK__REPORT_COACH, Keys.REPORT__FK__REPORT_CREATED_BY, Keys.REPORT__FK__REPORT_FINISHED_BY, Keys.REPORT__FK__REPORT_REFEREE1, Keys.REPORT__FK__REPORT_REFEREE2, Keys.REPORT__FK__REPORT_REFEREE3, Keys.REPORT__FK__REPORT_REPORTEE, Keys.REPORT__FK__REPORT_UPDATED_BY);
    }

    private transient LoginPath _fk_ReportCoach;

    /**
     * Get the implicit join path to the <code>public.login</code> table, via
     * the <code>fk__report_coach</code> key.
     */
    public LoginPath fk_ReportCoach() {
        if (_fk_ReportCoach == null)
            _fk_ReportCoach = new LoginPath(this, Keys.REPORT__FK__REPORT_COACH, null);

        return _fk_ReportCoach;
    }

    private transient LoginPath _fk_ReportCreatedBy;

    /**
     * Get the implicit join path to the <code>public.login</code> table, via
     * the <code>fk__report_created_by</code> key.
     */
    public LoginPath fk_ReportCreatedBy() {
        if (_fk_ReportCreatedBy == null)
            _fk_ReportCreatedBy = new LoginPath(this, Keys.REPORT__FK__REPORT_CREATED_BY, null);

        return _fk_ReportCreatedBy;
    }

    private transient LoginPath _fk_ReportFinishedBy;

    /**
     * Get the implicit join path to the <code>public.login</code> table, via
     * the <code>fk__report_finished_by</code> key.
     */
    public LoginPath fk_ReportFinishedBy() {
        if (_fk_ReportFinishedBy == null)
            _fk_ReportFinishedBy = new LoginPath(this, Keys.REPORT__FK__REPORT_FINISHED_BY, null);

        return _fk_ReportFinishedBy;
    }

    private transient LoginPath _fk_ReportReferee1;

    /**
     * Get the implicit join path to the <code>public.login</code> table, via
     * the <code>fk__report_referee1</code> key.
     */
    public LoginPath fk_ReportReferee1() {
        if (_fk_ReportReferee1 == null)
            _fk_ReportReferee1 = new LoginPath(this, Keys.REPORT__FK__REPORT_REFEREE1, null);

        return _fk_ReportReferee1;
    }

    private transient LoginPath _fk_ReportReferee2;

    /**
     * Get the implicit join path to the <code>public.login</code> table, via
     * the <code>fk__report_referee2</code> key.
     */
    public LoginPath fk_ReportReferee2() {
        if (_fk_ReportReferee2 == null)
            _fk_ReportReferee2 = new LoginPath(this, Keys.REPORT__FK__REPORT_REFEREE2, null);

        return _fk_ReportReferee2;
    }

    private transient LoginPath _fk_ReportReferee3;

    /**
     * Get the implicit join path to the <code>public.login</code> table, via
     * the <code>fk__report_referee3</code> key.
     */
    public LoginPath fk_ReportReferee3() {
        if (_fk_ReportReferee3 == null)
            _fk_ReportReferee3 = new LoginPath(this, Keys.REPORT__FK__REPORT_REFEREE3, null);

        return _fk_ReportReferee3;
    }

    private transient LoginPath _fk_ReportReportee;

    /**
     * Get the implicit join path to the <code>public.login</code> table, via
     * the <code>fk__report_reportee</code> key.
     */
    public LoginPath fk_ReportReportee() {
        if (_fk_ReportReportee == null)
            _fk_ReportReportee = new LoginPath(this, Keys.REPORT__FK__REPORT_REPORTEE, null);

        return _fk_ReportReportee;
    }

    private transient LoginPath _fk_ReportUpdatedBy;

    /**
     * Get the implicit join path to the <code>public.login</code> table, via
     * the <code>fk__report_updated_by</code> key.
     */
    public LoginPath fk_ReportUpdatedBy() {
        if (_fk_ReportUpdatedBy == null)
            _fk_ReportUpdatedBy = new LoginPath(this, Keys.REPORT__FK__REPORT_UPDATED_BY, null);

        return _fk_ReportUpdatedBy;
    }

    private transient ReportVideoCommentRefPath _reportVideoCommentRef;

    /**
     * Get the implicit to-many join path to the
     * <code>public.report_video_comment_ref</code> table
     */
    public ReportVideoCommentRefPath reportVideoCommentRef() {
        if (_reportVideoCommentRef == null)
            _reportVideoCommentRef = new ReportVideoCommentRefPath(this, null, Keys.REPORT_VIDEO_COMMENT_REF__FK__REPORT_COACH.getInverseKey());

        return _reportVideoCommentRef;
    }

    private transient ReportCommentPath _reportComment;

    /**
     * Get the implicit to-many join path to the
     * <code>public.report_comment</code> table
     */
    public ReportCommentPath reportComment() {
        if (_reportComment == null)
            _reportComment = new ReportCommentPath(this, null, Keys.REPORT_COMMENT__FK__REPORT_COMMENT_REPORT.getInverseKey());

        return _reportComment;
    }

    private transient ReportVideoCommentPath _reportVideoComment;

    /**
     * Get the implicit to-many join path to the
     * <code>public.report_video_comment</code> table
     */
    public ReportVideoCommentPath reportVideoComment() {
        if (_reportVideoComment == null)
            _reportVideoComment = new ReportVideoCommentPath(this, null, Keys.REPORT_VIDEO_COMMENT__FK__REPORT_VIDEO_COMMENT_REPORT.getInverseKey());

        return _reportVideoComment;
    }

    @Override
    public Report as(String alias) {
        return new Report(DSL.name(alias), this);
    }

    @Override
    public Report as(Name alias) {
        return new Report(alias, this);
    }

    @Override
    public Report as(Table<?> alias) {
        return new Report(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Report rename(String name) {
        return new Report(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Report rename(Name name) {
        return new Report(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Report rename(Table<?> name) {
        return new Report(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Report where(Condition condition) {
        return new Report(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Report where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Report where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Report where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Report where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Report where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Report where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Report where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Report whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Report whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
