/*
 * This file is generated by jOOQ.
 */
package ch.refereecoach.probasket.jooq.tables;


import ch.refereecoach.probasket.jooq.Keys;
import ch.refereecoach.probasket.jooq.Public;
import ch.refereecoach.probasket.jooq.tables.Report.ReportPath;
import ch.refereecoach.probasket.jooq.tables.records.ReportCommentRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ReportComment extends TableImpl<ReportCommentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.report_comment</code>
     */
    public static final ReportComment REPORT_COMMENT = new ReportComment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ReportCommentRecord> getRecordType() {
        return ReportCommentRecord.class;
    }

    /**
     * The column <code>public.report_comment.id</code>.
     */
    public final TableField<ReportCommentRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.report_comment.report_id</code>.
     */
    public final TableField<ReportCommentRecord, Long> REPORT_ID = createField(DSL.name("report_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.report_comment.type</code>.
     */
    public final TableField<ReportCommentRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.report_comment.comment</code>.
     */
    public final TableField<ReportCommentRecord, String> COMMENT = createField(DSL.name("comment"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.report_comment.score</code>.
     */
    public final TableField<ReportCommentRecord, BigDecimal> SCORE = createField(DSL.name("score"), SQLDataType.NUMERIC(2, 1), this, "");

    private ReportComment(Name alias, Table<ReportCommentRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ReportComment(Name alias, Table<ReportCommentRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.report_comment</code> table reference
     */
    public ReportComment(String alias) {
        this(DSL.name(alias), REPORT_COMMENT);
    }

    /**
     * Create an aliased <code>public.report_comment</code> table reference
     */
    public ReportComment(Name alias) {
        this(alias, REPORT_COMMENT);
    }

    /**
     * Create a <code>public.report_comment</code> table reference
     */
    public ReportComment() {
        this(DSL.name("report_comment"), null);
    }

    public <O extends Record> ReportComment(Table<O> path, ForeignKey<O, ReportCommentRecord> childPath, InverseForeignKey<O, ReportCommentRecord> parentPath) {
        super(path, childPath, parentPath, REPORT_COMMENT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ReportCommentPath extends ReportComment implements Path<ReportCommentRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ReportCommentPath(Table<O> path, ForeignKey<O, ReportCommentRecord> childPath, InverseForeignKey<O, ReportCommentRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ReportCommentPath(Name alias, Table<ReportCommentRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ReportCommentPath as(String alias) {
            return new ReportCommentPath(DSL.name(alias), this);
        }

        @Override
        public ReportCommentPath as(Name alias) {
            return new ReportCommentPath(alias, this);
        }

        @Override
        public ReportCommentPath as(Table<?> alias) {
            return new ReportCommentPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ReportCommentRecord, Long> getIdentity() {
        return (Identity<ReportCommentRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ReportCommentRecord> getPrimaryKey() {
        return Keys.PK__REPORT_COMMENT;
    }

    @Override
    public List<ForeignKey<ReportCommentRecord, ?>> getReferences() {
        return Arrays.asList(Keys.REPORT_COMMENT__FK__REPORT_COMMENT_REPORT);
    }

    private transient ReportPath _report;

    /**
     * Get the implicit join path to the <code>public.report</code> table.
     */
    public ReportPath report() {
        if (_report == null)
            _report = new ReportPath(this, Keys.REPORT_COMMENT__FK__REPORT_COMMENT_REPORT, null);

        return _report;
    }

    @Override
    public ReportComment as(String alias) {
        return new ReportComment(DSL.name(alias), this);
    }

    @Override
    public ReportComment as(Name alias) {
        return new ReportComment(alias, this);
    }

    @Override
    public ReportComment as(Table<?> alias) {
        return new ReportComment(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ReportComment rename(String name) {
        return new ReportComment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ReportComment rename(Name name) {
        return new ReportComment(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ReportComment rename(Table<?> name) {
        return new ReportComment(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ReportComment where(Condition condition) {
        return new ReportComment(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ReportComment where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ReportComment where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ReportComment where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ReportComment where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ReportComment where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ReportComment where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ReportComment where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ReportComment whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ReportComment whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
