/*
 * This file is generated by jOOQ.
 */
package ch.refereecoach.probasket.jooq.tables;


import ch.refereecoach.probasket.jooq.Keys;
import ch.refereecoach.probasket.jooq.Public;
import ch.refereecoach.probasket.jooq.tables.Report.ReportPath;
import ch.refereecoach.probasket.jooq.tables.ReportVideoComment.ReportVideoCommentPath;
import ch.refereecoach.probasket.jooq.tables.ReportVideoCommentReply.ReportVideoCommentReplyPath;
import ch.refereecoach.probasket.jooq.tables.records.LoginRecord;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Login extends TableImpl<LoginRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.login</code>
     */
    public static final Login LOGIN = new Login();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LoginRecord> getRecordType() {
        return LoginRecord.class;
    }

    /**
     * The column <code>public.login.id</code>.
     */
    public final TableField<LoginRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.login.firstname</code>.
     */
    public final TableField<LoginRecord, String> FIRSTNAME = createField(DSL.name("firstname"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.login.lastname</code>.
     */
    public final TableField<LoginRecord, String> LASTNAME = createField(DSL.name("lastname"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.login.email</code>.
     */
    public final TableField<LoginRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.login.last_login</code>.
     */
    public final TableField<LoginRecord, LocalDateTime> LAST_LOGIN = createField(DSL.name("last_login"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.login.referee_coach</code>.
     */
    public final TableField<LoginRecord, Boolean> REFEREE_COACH = createField(DSL.name("referee_coach"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.login.referee</code>.
     */
    public final TableField<LoginRecord, Boolean> REFEREE = createField(DSL.name("referee"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.login.trainer_coach</code>.
     */
    public final TableField<LoginRecord, Boolean> TRAINER_COACH = createField(DSL.name("trainer_coach"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.login.trainer</code>.
     */
    public final TableField<LoginRecord, Boolean> TRAINER = createField(DSL.name("trainer"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.login.admin</code>.
     */
    public final TableField<LoginRecord, Boolean> ADMIN = createField(DSL.name("admin"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.login.rank</code>.
     */
    public final TableField<LoginRecord, String> RANK = createField(DSL.name("rank"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.login.active</code>.
     */
    public final TableField<LoginRecord, Boolean> ACTIVE = createField(DSL.name("active"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("true"), SQLDataType.BOOLEAN)), this, "");

    private Login(Name alias, Table<LoginRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Login(Name alias, Table<LoginRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.login</code> table reference
     */
    public Login(String alias) {
        this(DSL.name(alias), LOGIN);
    }

    /**
     * Create an aliased <code>public.login</code> table reference
     */
    public Login(Name alias) {
        this(alias, LOGIN);
    }

    /**
     * Create a <code>public.login</code> table reference
     */
    public Login() {
        this(DSL.name("login"), null);
    }

    public <O extends Record> Login(Table<O> path, ForeignKey<O, LoginRecord> childPath, InverseForeignKey<O, LoginRecord> parentPath) {
        super(path, childPath, parentPath, LOGIN);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class LoginPath extends Login implements Path<LoginRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> LoginPath(Table<O> path, ForeignKey<O, LoginRecord> childPath, InverseForeignKey<O, LoginRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private LoginPath(Name alias, Table<LoginRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public LoginPath as(String alias) {
            return new LoginPath(DSL.name(alias), this);
        }

        @Override
        public LoginPath as(Name alias) {
            return new LoginPath(alias, this);
        }

        @Override
        public LoginPath as(Table<?> alias) {
            return new LoginPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<LoginRecord> getPrimaryKey() {
        return Keys.PK__LOGIN;
    }

    private transient ReportPath _fk_ReportCoach;

    /**
     * Get the implicit to-many join path to the <code>public.report</code>
     * table, via the <code>fk__report_coach</code> key
     */
    public ReportPath fk_ReportCoach() {
        if (_fk_ReportCoach == null)
            _fk_ReportCoach = new ReportPath(this, null, Keys.REPORT__FK__REPORT_COACH.getInverseKey());

        return _fk_ReportCoach;
    }

    private transient ReportPath _fk_ReportCreatedBy;

    /**
     * Get the implicit to-many join path to the <code>public.report</code>
     * table, via the <code>fk__report_created_by</code> key
     */
    public ReportPath fk_ReportCreatedBy() {
        if (_fk_ReportCreatedBy == null)
            _fk_ReportCreatedBy = new ReportPath(this, null, Keys.REPORT__FK__REPORT_CREATED_BY.getInverseKey());

        return _fk_ReportCreatedBy;
    }

    private transient ReportPath _fk_ReportFinishedBy;

    /**
     * Get the implicit to-many join path to the <code>public.report</code>
     * table, via the <code>fk__report_finished_by</code> key
     */
    public ReportPath fk_ReportFinishedBy() {
        if (_fk_ReportFinishedBy == null)
            _fk_ReportFinishedBy = new ReportPath(this, null, Keys.REPORT__FK__REPORT_FINISHED_BY.getInverseKey());

        return _fk_ReportFinishedBy;
    }

    private transient ReportPath _fk_ReportReferee1;

    /**
     * Get the implicit to-many join path to the <code>public.report</code>
     * table, via the <code>fk__report_referee1</code> key
     */
    public ReportPath fk_ReportReferee1() {
        if (_fk_ReportReferee1 == null)
            _fk_ReportReferee1 = new ReportPath(this, null, Keys.REPORT__FK__REPORT_REFEREE1.getInverseKey());

        return _fk_ReportReferee1;
    }

    private transient ReportPath _fk_ReportReferee2;

    /**
     * Get the implicit to-many join path to the <code>public.report</code>
     * table, via the <code>fk__report_referee2</code> key
     */
    public ReportPath fk_ReportReferee2() {
        if (_fk_ReportReferee2 == null)
            _fk_ReportReferee2 = new ReportPath(this, null, Keys.REPORT__FK__REPORT_REFEREE2.getInverseKey());

        return _fk_ReportReferee2;
    }

    private transient ReportPath _fk_ReportReferee3;

    /**
     * Get the implicit to-many join path to the <code>public.report</code>
     * table, via the <code>fk__report_referee3</code> key
     */
    public ReportPath fk_ReportReferee3() {
        if (_fk_ReportReferee3 == null)
            _fk_ReportReferee3 = new ReportPath(this, null, Keys.REPORT__FK__REPORT_REFEREE3.getInverseKey());

        return _fk_ReportReferee3;
    }

    private transient ReportPath _fk_ReportReportee;

    /**
     * Get the implicit to-many join path to the <code>public.report</code>
     * table, via the <code>fk__report_reportee</code> key
     */
    public ReportPath fk_ReportReportee() {
        if (_fk_ReportReportee == null)
            _fk_ReportReportee = new ReportPath(this, null, Keys.REPORT__FK__REPORT_REPORTEE.getInverseKey());

        return _fk_ReportReportee;
    }

    private transient ReportPath _fk_ReportUpdatedBy;

    /**
     * Get the implicit to-many join path to the <code>public.report</code>
     * table, via the <code>fk__report_updated_by</code> key
     */
    public ReportPath fk_ReportUpdatedBy() {
        if (_fk_ReportUpdatedBy == null)
            _fk_ReportUpdatedBy = new ReportPath(this, null, Keys.REPORT__FK__REPORT_UPDATED_BY.getInverseKey());

        return _fk_ReportUpdatedBy;
    }

    private transient ReportVideoCommentPath _reportVideoComment;

    /**
     * Get the implicit to-many join path to the
     * <code>public.report_video_comment</code> table
     */
    public ReportVideoCommentPath reportVideoComment() {
        if (_reportVideoComment == null)
            _reportVideoComment = new ReportVideoCommentPath(this, null, Keys.REPORT_VIDEO_COMMENT__FK__REPORT_VIDEO_COMMENT_CREATED_BY.getInverseKey());

        return _reportVideoComment;
    }

    private transient ReportVideoCommentReplyPath _reportVideoCommentReply;

    /**
     * Get the implicit to-many join path to the
     * <code>public.report_video_comment_reply</code> table
     */
    public ReportVideoCommentReplyPath reportVideoCommentReply() {
        if (_reportVideoCommentReply == null)
            _reportVideoCommentReply = new ReportVideoCommentReplyPath(this, null, Keys.REPORT_VIDEO_COMMENT_REPLY__FK__REPORT_VIDEO_COMMENT_REPLY_CREATED_BY.getInverseKey());

        return _reportVideoCommentReply;
    }

    @Override
    public Login as(String alias) {
        return new Login(DSL.name(alias), this);
    }

    @Override
    public Login as(Name alias) {
        return new Login(alias, this);
    }

    @Override
    public Login as(Table<?> alias) {
        return new Login(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Login rename(String name) {
        return new Login(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Login rename(Name name) {
        return new Login(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Login rename(Table<?> name) {
        return new Login(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Login where(Condition condition) {
        return new Login(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Login where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Login where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Login where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Login where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Login where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Login where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Login where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Login whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Login whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
