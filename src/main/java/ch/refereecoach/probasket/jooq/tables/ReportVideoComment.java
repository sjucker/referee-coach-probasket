/*
 * This file is generated by jOOQ.
 */
package ch.refereecoach.probasket.jooq.tables;


import ch.refereecoach.probasket.jooq.Keys;
import ch.refereecoach.probasket.jooq.Public;
import ch.refereecoach.probasket.jooq.tables.Login.LoginPath;
import ch.refereecoach.probasket.jooq.tables.Report.ReportPath;
import ch.refereecoach.probasket.jooq.tables.ReportVideoCommentRef.ReportVideoCommentRefPath;
import ch.refereecoach.probasket.jooq.tables.ReportVideoCommentReply.ReportVideoCommentReplyPath;
import ch.refereecoach.probasket.jooq.tables.ReportVideoCommentTag.ReportVideoCommentTagPath;
import ch.refereecoach.probasket.jooq.tables.Tag.TagPath;
import ch.refereecoach.probasket.jooq.tables.records.ReportVideoCommentRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ReportVideoComment extends TableImpl<ReportVideoCommentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.report_video_comment</code>
     */
    public static final ReportVideoComment REPORT_VIDEO_COMMENT = new ReportVideoComment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ReportVideoCommentRecord> getRecordType() {
        return ReportVideoCommentRecord.class;
    }

    /**
     * The column <code>public.report_video_comment.id</code>.
     */
    public final TableField<ReportVideoCommentRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.report_video_comment.report_id</code>.
     */
    public final TableField<ReportVideoCommentRecord, Long> REPORT_ID = createField(DSL.name("report_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.report_video_comment.timestamp_in_seconds</code>.
     */
    public final TableField<ReportVideoCommentRecord, Long> TIMESTAMP_IN_SECONDS = createField(DSL.name("timestamp_in_seconds"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.report_video_comment.comment</code>.
     */
    public final TableField<ReportVideoCommentRecord, String> COMMENT = createField(DSL.name("comment"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.report_video_comment.created_at</code>.
     */
    public final TableField<ReportVideoCommentRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.report_video_comment.created_by</code>.
     */
    public final TableField<ReportVideoCommentRecord, Long> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.report_video_comment.requires_reply</code>.
     */
    public final TableField<ReportVideoCommentRecord, Boolean> REQUIRES_REPLY = createField(DSL.name("requires_reply"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    private ReportVideoComment(Name alias, Table<ReportVideoCommentRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ReportVideoComment(Name alias, Table<ReportVideoCommentRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.report_video_comment</code> table
     * reference
     */
    public ReportVideoComment(String alias) {
        this(DSL.name(alias), REPORT_VIDEO_COMMENT);
    }

    /**
     * Create an aliased <code>public.report_video_comment</code> table
     * reference
     */
    public ReportVideoComment(Name alias) {
        this(alias, REPORT_VIDEO_COMMENT);
    }

    /**
     * Create a <code>public.report_video_comment</code> table reference
     */
    public ReportVideoComment() {
        this(DSL.name("report_video_comment"), null);
    }

    public <O extends Record> ReportVideoComment(Table<O> path, ForeignKey<O, ReportVideoCommentRecord> childPath, InverseForeignKey<O, ReportVideoCommentRecord> parentPath) {
        super(path, childPath, parentPath, REPORT_VIDEO_COMMENT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ReportVideoCommentPath extends ReportVideoComment implements Path<ReportVideoCommentRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ReportVideoCommentPath(Table<O> path, ForeignKey<O, ReportVideoCommentRecord> childPath, InverseForeignKey<O, ReportVideoCommentRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ReportVideoCommentPath(Name alias, Table<ReportVideoCommentRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ReportVideoCommentPath as(String alias) {
            return new ReportVideoCommentPath(DSL.name(alias), this);
        }

        @Override
        public ReportVideoCommentPath as(Name alias) {
            return new ReportVideoCommentPath(alias, this);
        }

        @Override
        public ReportVideoCommentPath as(Table<?> alias) {
            return new ReportVideoCommentPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ReportVideoCommentRecord, Long> getIdentity() {
        return (Identity<ReportVideoCommentRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ReportVideoCommentRecord> getPrimaryKey() {
        return Keys.PK__REPORT_VIDEO_COMMENT;
    }

    @Override
    public List<ForeignKey<ReportVideoCommentRecord, ?>> getReferences() {
        return Arrays.asList(Keys.REPORT_VIDEO_COMMENT__FK__REPORT_VIDEO_COMMENT_CREATED_BY, Keys.REPORT_VIDEO_COMMENT__FK__REPORT_VIDEO_COMMENT_REPORT);
    }

    private transient LoginPath _login;

    /**
     * Get the implicit join path to the <code>public.login</code> table.
     */
    public LoginPath login() {
        if (_login == null)
            _login = new LoginPath(this, Keys.REPORT_VIDEO_COMMENT__FK__REPORT_VIDEO_COMMENT_CREATED_BY, null);

        return _login;
    }

    private transient ReportPath _report;

    /**
     * Get the implicit join path to the <code>public.report</code> table.
     */
    public ReportPath report() {
        if (_report == null)
            _report = new ReportPath(this, Keys.REPORT_VIDEO_COMMENT__FK__REPORT_VIDEO_COMMENT_REPORT, null);

        return _report;
    }

    private transient ReportVideoCommentRefPath _reportVideoCommentRef;

    /**
     * Get the implicit to-many join path to the
     * <code>public.report_video_comment_ref</code> table
     */
    public ReportVideoCommentRefPath reportVideoCommentRef() {
        if (_reportVideoCommentRef == null)
            _reportVideoCommentRef = new ReportVideoCommentRefPath(this, null, Keys.REPORT_VIDEO_COMMENT_REF__FK__REPORT_REPORTEE.getInverseKey());

        return _reportVideoCommentRef;
    }

    private transient ReportVideoCommentReplyPath _reportVideoCommentReply;

    /**
     * Get the implicit to-many join path to the
     * <code>public.report_video_comment_reply</code> table
     */
    public ReportVideoCommentReplyPath reportVideoCommentReply() {
        if (_reportVideoCommentReply == null)
            _reportVideoCommentReply = new ReportVideoCommentReplyPath(this, null, Keys.REPORT_VIDEO_COMMENT_REPLY__FK__REPORT_VIDEO_COMMENT_REPLY_COMMENT.getInverseKey());

        return _reportVideoCommentReply;
    }

    private transient ReportVideoCommentTagPath _reportVideoCommentTag;

    /**
     * Get the implicit to-many join path to the
     * <code>public.report_video_comment_tag</code> table
     */
    public ReportVideoCommentTagPath reportVideoCommentTag() {
        if (_reportVideoCommentTag == null)
            _reportVideoCommentTag = new ReportVideoCommentTagPath(this, null, Keys.REPORT_VIDEO_COMMENT_TAG__FK__REPORT_VIDEO_COMMENT_TAG_COMMENT.getInverseKey());

        return _reportVideoCommentTag;
    }

    /**
     * Get the implicit many-to-many join path to the <code>public.tag</code>
     * table
     */
    public TagPath tag() {
        return reportVideoCommentTag().tag();
    }

    @Override
    public ReportVideoComment as(String alias) {
        return new ReportVideoComment(DSL.name(alias), this);
    }

    @Override
    public ReportVideoComment as(Name alias) {
        return new ReportVideoComment(alias, this);
    }

    @Override
    public ReportVideoComment as(Table<?> alias) {
        return new ReportVideoComment(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ReportVideoComment rename(String name) {
        return new ReportVideoComment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ReportVideoComment rename(Name name) {
        return new ReportVideoComment(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ReportVideoComment rename(Table<?> name) {
        return new ReportVideoComment(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ReportVideoComment where(Condition condition) {
        return new ReportVideoComment(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ReportVideoComment where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ReportVideoComment where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ReportVideoComment where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ReportVideoComment where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ReportVideoComment where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ReportVideoComment where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ReportVideoComment where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ReportVideoComment whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ReportVideoComment whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
