/*
 * This file is generated by jOOQ.
 */
package ch.refereecoach.probasket.jooq.tables;


import ch.refereecoach.probasket.jooq.Keys;
import ch.refereecoach.probasket.jooq.Public;
import ch.refereecoach.probasket.jooq.tables.records.ReportCommentsLastReadRecord;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ReportCommentsLastRead extends TableImpl<ReportCommentsLastReadRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.report_comments_last_read</code>
     */
    public static final ReportCommentsLastRead REPORT_COMMENTS_LAST_READ = new ReportCommentsLastRead();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ReportCommentsLastReadRecord> getRecordType() {
        return ReportCommentsLastReadRecord.class;
    }

    /**
     * The column <code>public.report_comments_last_read.report_id</code>.
     */
    public final TableField<ReportCommentsLastReadRecord, Long> REPORT_ID = createField(DSL.name("report_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.report_comments_last_read.user_id</code>.
     */
    public final TableField<ReportCommentsLastReadRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.report_comments_last_read.last_read_at</code>.
     */
    public final TableField<ReportCommentsLastReadRecord, LocalDateTime> LAST_READ_AT = createField(DSL.name("last_read_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    private ReportCommentsLastRead(Name alias, Table<ReportCommentsLastReadRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ReportCommentsLastRead(Name alias, Table<ReportCommentsLastReadRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.report_comments_last_read</code> table
     * reference
     */
    public ReportCommentsLastRead(String alias) {
        this(DSL.name(alias), REPORT_COMMENTS_LAST_READ);
    }

    /**
     * Create an aliased <code>public.report_comments_last_read</code> table
     * reference
     */
    public ReportCommentsLastRead(Name alias) {
        this(alias, REPORT_COMMENTS_LAST_READ);
    }

    /**
     * Create a <code>public.report_comments_last_read</code> table reference
     */
    public ReportCommentsLastRead() {
        this(DSL.name("report_comments_last_read"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ReportCommentsLastReadRecord> getPrimaryKey() {
        return Keys.PK__REPORT_COMMENTS_LAST_READ;
    }

    @Override
    public ReportCommentsLastRead as(String alias) {
        return new ReportCommentsLastRead(DSL.name(alias), this);
    }

    @Override
    public ReportCommentsLastRead as(Name alias) {
        return new ReportCommentsLastRead(alias, this);
    }

    @Override
    public ReportCommentsLastRead as(Table<?> alias) {
        return new ReportCommentsLastRead(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ReportCommentsLastRead rename(String name) {
        return new ReportCommentsLastRead(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ReportCommentsLastRead rename(Name name) {
        return new ReportCommentsLastRead(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ReportCommentsLastRead rename(Table<?> name) {
        return new ReportCommentsLastRead(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ReportCommentsLastRead where(Condition condition) {
        return new ReportCommentsLastRead(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ReportCommentsLastRead where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ReportCommentsLastRead where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ReportCommentsLastRead where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ReportCommentsLastRead where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ReportCommentsLastRead where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ReportCommentsLastRead where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ReportCommentsLastRead where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ReportCommentsLastRead whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ReportCommentsLastRead whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
